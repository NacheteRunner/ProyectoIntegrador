/*
 * actorMattise.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Wed Jan 26 17:10:06 2022
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package modelo;

import com.matisse.reflect.*;

/**
 * <code>actorMattise</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class actorMattise extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Wed Jan 26 17:10:06 2022
     */

    /*
     * Class variables and methods
     */

    /** Class <code>actorMattise</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("modelo.actorMattise"));

    /**
     * Gets the <code>actorMattise</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public actorMattise(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected actorMattise(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(actorMattise.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, actorMattise.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(actorMattise.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, actorMattise.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'id' */

    /** Attribute <code>id</code> cache ID */
    private static int idCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("id",CID));

    /**
     * Gets the <code>id</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idCID);
    }


    /**
     * Gets the <code>id</code> attribute value.
     * @return the value
     *
     * @see #setId
     * @see #removeId
     */
    public final int getId() {
        return getInteger(getIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>id</code> attribute value.
     * @param val the new value
     *
     * @see #getId
     * @see #removeId
     */
    public final void setId(int val) {
        setInteger(getIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>id</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getId
     * @see #setId
     */
    public final void removeId() {
        removeValue(getIdAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getId
     * @see #setId
     */
    public final boolean isIdNull() {
        return isNull(getIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getId
     * @see #setId
     */
    public final boolean isIdDefaultValue() {
        return isDefaultValue(getIdAttribute(getMtDatabase()));
    }


    /* Attribute 'nombre' */

    /** Attribute <code>nombre</code> cache ID */
    private static int nombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre",CID));

    /**
     * Gets the <code>nombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombreCID);
    }


    /**
     * Gets the <code>nombre</code> attribute value.
     * @return the value
     *
     * @see #setNombre
     * @see #removeNombre
     */
    public final String getNombre() {
        return getString(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombre</code> attribute value.
     * @param val the new value
     *
     * @see #getNombre
     * @see #removeNombre
     */
    public final void setNombre(String val) {
        setString(getNombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final void removeNombre() {
        removeValue(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreNull() {
        return isNull(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreDefaultValue() {
        return isDefaultValue(getNombreAttribute(getMtDatabase()));
    }


    /* Attribute 'apellidos' */

    /** Attribute <code>apellidos</code> cache ID */
    private static int apellidosCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("apellidos",CID));

    /**
     * Gets the <code>apellidos</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getApellidosAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(apellidosCID);
    }


    /**
     * Gets the <code>apellidos</code> attribute value.
     * @return the value
     *
     * @see #setApellidos
     * @see #removeApellidos
     */
    public final String getApellidos() {
        return getString(getApellidosAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>apellidos</code> attribute value.
     * @param val the new value
     *
     * @see #getApellidos
     * @see #removeApellidos
     */
    public final void setApellidos(String val) {
        setString(getApellidosAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>apellidos</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getApellidos
     * @see #setApellidos
     */
    public final void removeApellidos() {
        removeValue(getApellidosAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getApellidos
     * @see #setApellidos
     */
    public final boolean isApellidosNull() {
        return isNull(getApellidosAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getApellidos
     * @see #setApellidos
     */
    public final boolean isApellidosDefaultValue() {
        return isDefaultValue(getApellidosAttribute(getMtDatabase()));
    }


    /* Attribute 'personaje' */

    /** Attribute <code>personaje</code> cache ID */
    private static int personajeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("personaje",CID));

    /**
     * Gets the <code>personaje</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPersonajeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(personajeCID);
    }


    /**
     * Gets the <code>personaje</code> attribute value.
     * @return the value
     *
     * @see #setPersonaje
     * @see #removePersonaje
     */
    public final String getPersonaje() {
        return getString(getPersonajeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>personaje</code> attribute value.
     * @param val the new value
     *
     * @see #getPersonaje
     * @see #removePersonaje
     */
    public final void setPersonaje(String val) {
        setString(getPersonajeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>personaje</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPersonaje
     * @see #setPersonaje
     */
    public final void removePersonaje() {
        removeValue(getPersonajeAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPersonaje
     * @see #setPersonaje
     */
    public final boolean isPersonajeNull() {
        return isNull(getPersonajeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPersonaje
     * @see #setPersonaje
     */
    public final boolean isPersonajeDefaultValue() {
        return isDefaultValue(getPersonajeAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public actorMattise(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[actorMattise]";
    }
}
